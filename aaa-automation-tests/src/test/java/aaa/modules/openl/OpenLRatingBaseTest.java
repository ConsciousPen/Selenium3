package aaa.modules.openl;

import static toolkit.verification.CustomSoftAssertions.assertSoftly;
import java.io.File;
import java.util.*;
import java.util.stream.Collectors;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Parameters;
import com.exigen.ipb.etcsa.utils.Dollar;
import com.exigen.ipb.etcsa.utils.TimeSetterUtil;
import aaa.common.Tab;
import aaa.common.pages.SearchPage;
import aaa.helpers.openl.model.OpenLFile;
import aaa.helpers.openl.model.OpenLPolicy;
import aaa.helpers.openl.model.OpenLTest;
import aaa.helpers.openl.model.auto_ss.AutoSSOpenLFile;
import aaa.helpers.openl.model.auto_ss.AutoSSOpenLPolicy;
import aaa.helpers.openl.testdata_builder.AutoSSTestDataGenerator;
import aaa.helpers.openl.testdata_builder.TestDataGenerator;
import aaa.modules.policy.PolicyBaseTest;
import aaa.utils.excel.bind.ExcelUnmarshaller;
import aaa.utils.excel.bind.annotation.ExcelTableElement;
import aaa.utils.excel.io.celltype.CellType;
import aaa.utils.excel.io.entity.area.ExcelCell;
import toolkit.datax.TestData;
import toolkit.exceptions.IstfException;

public abstract class OpenLRatingBaseTest<P extends OpenLPolicy, F extends OpenLFile<P>> extends PolicyBaseTest {
	protected static final Logger log = LoggerFactory.getLogger(OpenLRatingBaseTest.class);

	private static final Object UNMARSHAL_LOCK = new Object();
	private String testsDir;

	protected String getTestsDir() {
		return testsDir;
	}

	/**
	 * Tests directory path setter where openl excel test files should be located
	 *
	 * @param testsDir path to the openl excel test files location. Should be defined in TestNG {@literal <suite>} level as <b>testsDir</b> parameter. E.g.: "src/test/resources/openl/auto_ss"
	 */
	@BeforeTest
	@Parameters({"testsDir"})
	public void setTestsDir(String testsDir) {
		this.testsDir = testsDir;
	}

	/**
	 * Get base policy creation TestData which will be used as second argument in appropriate {@link TestDataGenerator#TestDataGenerator(String, TestData)} constructor.
	 * It should be used to add common test data to test specific rating test data generated by {@link TestDataGenerator#getRatingData(OpenLPolicy)}
	 * By default it returns {@code getPolicyTD("DataGather", "TestData")} test data but should be overridden in test class level if needed (e.g. to mask some tabs)
	 *
	 * @return base policy creation TestData
	 */
	protected TestData getRatingDataPattern() {
		return getPolicyTD();
	}

	/**
	 * List of available excel cell types {@link CellType} which will be used to parse excel cells values and bind them to appropriate java types.
	 * Default list of cell types should cover majority of openl tests but if you need to parse some specific types (e.g. {@link aaa.utils.excel.io.celltype.LocalDateCellType} for {@link java.time.LocalDateTime})
	 * you should provide this extended list in overridden method on test class level
	 *
	 * @return List of available excel cell types {@link CellType} to be used to parse excel cells values and bind them to appropriate java types
	 */
	protected List<CellType<?>> getUnmarshallingCellTypes() {
		return Arrays.asList(ExcelCell.INTEGER_TYPE, ExcelCell.DOUBLE_TYPE, ExcelCell.BOOLEAN_TYPE, ExcelCell.LOCAL_DATE_TYPE, ExcelCell.STRING_TYPE, ExcelCell.DOLLAR_CELL_TYPE);
	}

	/**
	 * Main test method for policy creation, premium calculation and Total Premium verification
	 *
	 * @param openLFileName openl excel filename with extension which should be located in {@link OpenLRatingBaseTest#testsDir} directory (e.g. "AZTests-20171101.xls")
	 * @param openLFileModelClass openl file model class which should be used for excel file unmarshalling where each {@code List<TableClassType>} field represents list of rows from appropriate excel sheet,
	 *                            where each {@code TableClassType} or its super class should be annotated with {@link ExcelTableElement}.<p>
	 *                            In order to make this method work properly {@code openLFileModelClass} class should be inherited from base {@link OpenLFile}
	 *                            and contain List of appropriate openl policies as a representation of rows from {@code "Batch- Policy"} excel sheet (where openl policy model class should be inherited from {@link OpenLPolicy})
	 *                            and List of appropriate tests as a representation of rows from {@code "Tests"} excel sheet (where opnel test model class should be inherited from {@link OpenLTest}).<p>
	 *                            See {@link AutoSSOpenLFile} as an example of openl file model class with lists of {@link AutoSSOpenLPolicy} openl policies and {@link OpenLTest} opnel tests
	 * @param tdGenerator instance of appropriate test data generator class used to generate test data to create policy (or any other premium calculation related data).<p>
	 *                    this {@link TestDataGenerator} should implement {@link TestDataGenerator#getRatingData(OpenLPolicy)} method with same openl policy argument type as in list of policies from {@code openLFileModelClass}.<p>
	 *                    See {@link AutoSSTestDataGenerator} as an example of test data generator class for {@link AutoSSOpenLPolicy} policy model class
	 *
	 * @param policyNumbers list of policy numbers for which policies should be created and total premiums should be verified on UI.<p>
	 *                      In order to search policy rows with policy numbers - {@link OpenLFile#PRIMARY_KEY_COLUMN_NAME} column is used in provided {@code openLFileName} test file in {@link OpenLFile#POLICY_SHEET_NAME} excel sheet.
	 *                      Expected premiums for these policies will be calculated as sum of non-empty cells from rows with same policy numbers in {@link OpenLTest#policy} column name in {@link OpenLFile#TESTS_SHEET_NAME}
	 *                      If {@code policyNumbers} list is empty then all policies from provided {@code openLFileName} excel file will be verified<p>
	 *                          (WARNING: avoid empty {@code policyNumbers} list argument for files with more than several policies since policy creation on UI takes significant amount of time)
	 */
	protected void verifyPremiums(String openLFileName, Class<F> openLFileModelClass, TestDataGenerator<P> tdGenerator, List<Integer> policyNumbers) {
		//TODO-dchubkov: assert that date in openLFileName is valid
		List<P> openLPolicies = getOpenLPolicies(openLFileName, openLFileModelClass, policyNumbers);

		mainApp().open();
		String customerNumber = createCustomerIndividual();
		assertSoftly(softly -> {
			for (P openLPolicy : openLPolicies) {
				log.info("Premium calculation verification initiated for test with policy number {} and expected premium {} from {} OpenL file",
						openLPolicy.getNumber(), openLPolicy.getExpectedPremium(), openLFileName);

				//TODO-dchubkov: add assertion that Effective date cannot be more than ? months/years prior to current date (each product/state has it's own value)
				if (openLPolicy.getEffectiveDate().isAfter(TimeSetterUtil.getInstance().getCurrentTime().toLocalDate())) {
					TimeSetterUtil.getInstance().nextPhase(openLPolicy.getEffectiveDate().atStartOfDay());
					mainApp().reopen();
					SearchPage.openCustomer(customerNumber);
				}

				Dollar actualPremium = createAndRateQuote(tdGenerator, openLPolicy);
				softly.assertThat(actualPremium).as("Total premium for policy number %s is not equal to expected one", openLPolicy.getNumber()).isEqualTo(openLPolicy.getExpectedPremium());
				log.info("Premium calculation verification for policy #{} has been {}", Tab.labelPolicyNumber.getValue(), actualPremium.equals(openLPolicy.getExpectedPremium()) ? "passed" : "failed");
				Tab.buttonSaveAndExit.click();
			}
		});
	}

	/**
	 * This method should generate appropriate test data to create policy (and/or perform endorsement(s), renewal(s) if needed), retrieve total premium from UI and return it
	 *
	 * @param tdGenerator instance of test data generator class used to generate needed test data(s) to create policy using provided {@code openLPolicy} policy object's data
	 * @param openLPolicy openl policy object as a representation of row from {@link OpenLFile#POLICY_SHEET_NAME} excel sheet
	 * @return actual total premium from UI
	 */
	protected abstract Dollar createAndRateQuote(TestDataGenerator<P> tdGenerator, P openLPolicy);

	/**
	 * Get list of openl policy objects populated with expected premiums to be verified and ordered by their effective dates for further valid time shifts (if needed)
	 *
	 * @param openLFileName openl excel filename with extension from which openl policy objects list should be retrieved
	 * @param openLFileModelClass openl file model class which should be used for excel file unmarshalling
	 * @param policyNumbers list of policy numbers for which policies should be created and total premiums should be verified on UI
	 * @return list of openl policy objects to be tested ordered by their effective dates
	 */
	protected List<P> getOpenLPolicies(String openLFileName, Class<F> openLFileModelClass, List<Integer> policyNumbers) {
		F openLFile;
		synchronized (UNMARSHAL_LOCK) { // Used to solve performance issues when parsing thousands of excel rows simultaneously in multiple threads
			ExcelUnmarshaller excelUnmarshaller = new ExcelUnmarshaller(new File(getTestsDir() + "/" + openLFileName), false, getUnmarshallingCellTypes());
			openLFile = excelUnmarshaller.unmarshal(openLFileModelClass);
			excelUnmarshaller.flushCache().close();
		}

		List<P> openLPolicies = getOpenLPoliciesWithExpectedPremiums(openLFile, policyNumbers);

		//Sort policies list by effective date for further valid time shifts
		openLPolicies = openLPolicies.stream().sorted(Comparator.comparing(OpenLPolicy::getEffectiveDate)).collect(Collectors.toList());
		return openLPolicies;
	}

	/**
	 * Get list of openl policy objects from {@code openLFile} object filtered by provided {@code policyNumbers} list and populate then with calculated expected premium taken from appropriate test objects.
	 * Expected premiums for these policies will be calculated as sum of non-empty cells from rows with same policy numbers in {@link OpenLTest#policy} column name in {@link OpenLFile#TESTS_SHEET_NAME}
	 * and divided by two if policies {@link OpenLPolicy#getTerm() equal to 6.<p>
	 * Override this method in test class level if expected  premium should be calculated in a different way
	 *
	 * @param openLFile openl file object as a representation of appropriate excel file with lists of openl policies and tests
	 * @param policyNumbers list of policy numbers for which policies should be created and total premiums should be verified on UI
	 * @return list of openl policy objects with calculated expected total premiums
	 */
	protected List<P> getOpenLPoliciesWithExpectedPremiums(F openLFile, List<Integer> policyNumbers) {
		List<P> openLPolicies = openLFile.getPolicies(policyNumbers);
		for (P policy : openLPolicies) {
			Dollar expectedPremium = openLFile.getTest(policy.getNumber()).getTotalPremium();
			if (policy.getTerm() == 6) {
				expectedPremium = expectedPremium.divide(2);
			}
			policy.setExpectedPremium(expectedPremium);
		}
		return openLPolicies;
	}

	/**
	 * Get policy numbers list to be tested
	 *
	 * @param policies String of policy numbers separated with "," character
	 * @return list of policy numbers to be tested or empty list if {@code policies} argument is empty string.
	 *
	 */
	protected List<Integer> getPolicyNumbers(String policies) {
		if (StringUtils.isBlank(policies)) {
			return Collections.emptyList();
		}
		String[] policyNumberStrings = policies.split(",");
		List<Integer> policyNumbers = new ArrayList<>(policyNumberStrings.length);
		for (String p : policyNumberStrings) {
			int policyNumber;
			try {
				policyNumber = Integer.parseInt(p.trim());
			} catch (NumberFormatException e) {
				throw new IstfException(String.format("Unable get policy number from \"%s\" string.", p), e);
			}
			policyNumbers.add(policyNumber);
		}
		return policyNumbers;
	}
}
