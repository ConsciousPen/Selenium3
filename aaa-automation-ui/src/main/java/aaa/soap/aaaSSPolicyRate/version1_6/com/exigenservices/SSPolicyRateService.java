package aaa.soap.aaaSSPolicyRate.version1_6.com.exigenservices;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.2.4
 * 2018-04-17T13:33:38.069-07:00
 * Generated source version: 3.2.4
 *
 */
@WebServiceClient(name = "SSPolicyRateService",
                  wsdlLocation = "file:/C:/Tools/apache-cxf-3.2.4/workspace/aaaSSPolicyRate/aaaSSPolicyRate.wsdl",
                  targetNamespace = "http://exigenservices.com/ipb/policy/integration")
public class SSPolicyRateService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://exigenservices.com/ipb/policy/integration", "SSPolicyRateService");
    public final static QName SSPolicyRatePort = new QName("http://exigenservices.com/ipb/policy/integration", "SSPolicyRatePort");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Tools/apache-cxf-3.2.4/workspace/aaaSSPolicyRate/aaaSSPolicyRate.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(SSPolicyRateService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/C:/Tools/apache-cxf-3.2.4/workspace/aaaSSPolicyRate/aaaSSPolicyRate.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public SSPolicyRateService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SSPolicyRateService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SSPolicyRateService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public SSPolicyRateService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public SSPolicyRateService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public SSPolicyRateService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns SSPolicyRatePort
     */
    @WebEndpoint(name = "SSPolicyRatePort")
    public SSPolicyRatePort getSSPolicyRatePort() {
        return super.getPort(SSPolicyRatePort, SSPolicyRatePort.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SSPolicyRatePort
     */
    @WebEndpoint(name = "SSPolicyRatePort")
    public SSPolicyRatePort getSSPolicyRatePort(WebServiceFeature... features) {
        return super.getPort(SSPolicyRatePort, SSPolicyRatePort.class, features);
    }

}
